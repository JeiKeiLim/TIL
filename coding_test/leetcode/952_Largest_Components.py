import numpy as np
from tester import Tester

class Solution:
    def get_factors(self, value):
        factor_list = []
        
        for i in range(2, value+1):
            if value%i == 0:
                factor_list.append(i)
        
        return factor_list
            
    def largestComponentSize(self, A) -> int:
        factor_list = []
        for i in range(len(A)):
            factor_list.append(self.get_factors(A[i]))
        
        conn2 = dict()
        
        for i in range(len(factor_list)):
            for j in range(i+1, len(factor_list)):
                did_find = False
                for k in range(len(factor_list[i])):
                    for m in range(len(factor_list[j])):
                        if factor_list[i][k] == factor_list[j][m]:
                            did_find = True
                            if A[i] in conn2.keys():
                                conn2[A[i]].add(A[j])
                            else:
                                conn2[A[i]] = set([A[j]])
                            if A[j] in conn2.keys():
                                conn2[A[j]].add(A[i])
                            else:
                                conn2[A[j]] = set([A[i]])
                            break
                    if did_find:
                        break
        
        # print(len(conn2))
        # def get_conn(n, path, key, node, max_conn):
        #     s_candidate = [node[k] for k in node[key]]


        def get_connection(result, n, path, key, node, max_conn):
            # print(key, len(node[key]), len(path))
            if max_conn in result:
                return max_conn

            if key in path:
                result.append(n)
            elif key in node.keys():
                path.append(key)
                for k in node[key]:
                    get_connection(result, n+1, path, k, node, max_conn)
            else:
                result.append(n)

            return max(result)

        m_conn = 0
        for key in conn2:

            m_conn = max(get_connection([], 0, [], key, conn2, len(A)), m_conn)
            # print(key, m_conn)
            if m_conn == len(A):
                break

        return m_conn

if __name__ == '__main__':
    testset = [
    [[2,3,6,7,4,12,21,39]],
    [[20,50,9,63]],
    [[4,6,15,35]],
    # [[9897, 9672, 4557, 7211, 419, 6875, 8118, 1423, 6903, 4105, 532, 7328, 5899, 8197, 4707, 2899, 357, 8958, 1544, 154, 4137, 834, 493, 5938, 5655, 6126, 8961, 180, 8379, 9856, 3787, 4347, 6802, 276, 2804, 315, 2784, 8172, 1920, 7468, 9569, 2470, 2549, 4899, 2771, 6924, 8178, 6527, 9067, 4382, 4968, 285, 3707, 2992, 8412, 4392, 682, 3823, 3573, 5891, 9770, 7891, 5545, 9702, 269, 7071, 9351, 8264, 6361, 4323, 7037, 4257, 226, 2778, 7567, 1205, 7413, 2562, 958, 3396, 7846, 9302, 7971, 7927, 807, 2101, 9294, 6238, 5626, 5145, 6694, 9953, 8335, 5355, 1602, 5436, 781, 9783, 5543, 7462, 6978, 4532, 5023, 1585, 3834, 7747, 9020, 9122, 1249, 6049, 453, 9405, 2719, 7685, 3783, 1916, 6058, 9983, 8257, 7991, 8649, 4639, 4015, 8946, 5173, 1071, 5653, 5262, 6595, 1507, 6450, 4064, 2728, 3632, 4834, 8186, 8573, 4084, 6107, 5243, 8590, 2109, 5195, 8711, 6818, 5886, 1851, 5016, 9551, 9862, 9156, 8950, 6312, 3204, 5988, 1821, 8618, 6997, 939, 5386, 5063, 8790, 3629, 3912, 4525, 5745, 1688, 3039, 4577, 3473, 86, 6925, 8948, 6552, 8891, 4570, 2302, 6148, 1243, 3099, 9110, 3827, 4144, 2956, 3736, 2868, 5463, 2925, 6371, 5360, 1319, 6565, 7428, 4827, 2120, 1449, 2425, 9559, 8347, 1129, 6625, 9679, 6507, 4495, 2546, 8120, 5746, 5311, 8363, 4408, 599, 7773, 5438, 5926, 497, 454, 5321, 3989, 188, 3313, 6889, 6140, 30, 8852, 3671, 6512, 8177, 65, 9811, 1113, 9083, 8222, 2993, 5226, 5347, 4235, 5494, 9558, 9838, 4303, 5611, 3452, 2712, 6021, 7942, 3876, 3015, 9439, 9835, 2105, 4678, 922, 8625, 1653, 2568, 8908, 4158, 8857, 8487, 9948, 7039, 5890, 7182, 4259, 6395, 9015, 642, 2015, 7745, 2424, 4826, 9442, 4637, 6033, 3382, 5893, 7218, 2996, 8739, 3529, 5652, 6138, 3209, 2968, 9757, 5108, 844, 4342, 5091, 9235, 146, 1285, 19, 1596, 3236, 7679, 1858, 1126, 2366, 9312, 7246, 9375, 1931, 6401, 3426, 465, 6004, 7765, 7953, 8408, 7813, 3129, 8500, 7911, 1808, 1855, 3935, 3019, 4731, 8895, 8313, 7327, 3586, 5820, 5858, 228, 1301, 8752, 7889, 2331, 9370, 7709, 1860, 2635, 3041, 6849, 8801, 4694, 8488, 4954, 1928, 5956, 9473, 5264, 6953, 8868, 275, 7320, 2322, 9645, 3806, 2071, 9344, 2954, 5291, 2357, 2174, 687, 3484, 9657, 8943, 2396, 996, 5592, 8976, 7307, 5086, 7357, 1556, 6546, 7912, 1811, 1132, 460, 1558, 2962, 1120, 7930, 7475, 2464, 2193, 734, 578, 3090, 2115, 320, 9260, 1050, 4207, 6101, 1723, 7626, 3746, 4216, 8713, 3660, 6142, 9945, 2526, 8406, 1197, 8856, 2726, 2647, 2052, 9204, 2756, 4843, 8440, 6496, 9730, 1379, 7453, 3881, 2724, 5934, 8160, 3635, 429, 9256, 2466, 8918, 5976, 3291, 8212, 5487, 1648, 5458, 505, 2387, 383, 3066, 4211, 7782, 8155, 2087, 1093, 7786, 9831, 8250, 6520, 4730, 2208, 3808, 3344, 2529, 5428, 4014, 9909, 1200, 946, 3096, 4320, 1188, 6020, 7370, 4725, 1299, 59, 2986, 9268, 8859, 7220, 5662, 377, 9400, 5445, 561, 2609, 4611, 8430, 6532, 2461, 6701, 5300, 9054, 3775, 8413, 536, 6301, 4306, 3716, 3465, 8600, 5748, 8312, 1924, 104, 7533, 6116, 4776, 3007, 2080, 6534, 5491, 8208, 6439, 9200, 4566, 2721, 3035, 4120, 8710, 810, 5759, 4670, 4879, 6368, 9333, 7576, 2628, 9692, 3837, 8174, 9901, 3574, 1791, 9503, 7464, 6203, 3180, 2294, 5319, 3231, 7850, 7097, 2757, 1766, 1037, 2521, 5206, 6752, 1748, 5780, 3375, 6418, 5136, 6920, 7940, 6584, 6274, 9809, 1010, 788, 58, 8013, 4703, 9385, 9158, 2273, 8927, 7604, 1443, 6947, 4418, 1829, 3542, 7764, 8906, 8988, 5583, 391, 1076, 4317, 6115, 4660, 9274, 1836, 3810, 3684, 8591, 3091, 8103, 8397, 4727, 8920, 7168, 7638, 9039, 9444, 9781, 2112, 8669, 6684, 6687, 2642, 3157, 814, 4451, 7394, 530, 5783, 1248, 2213, 7636, 815, 9547, 9636, 692, 8372, 3160, 9584, 8326, 5930, 8559, 5410, 5828, 7269, 3378, 380, 5163, 6533, 2314, 234, 7603, 5221, 9289, 639, 1150, 3798, 9492, 3563, 2491, 7342, 1106, 1151, 238, 2645, 967, 6063, 9424, 504, 3638, 4679, 6110, 9589, 7072, 670, 8729, 9671, 722, 8899, 2094, 1728, 6814, 8592, 4130, 8833, 7129, 8237, 7699, 7682, 2309, 2061, 4314, 3726, 4594, 3100, 7185, 8531, 7179, 8998, 9101, 7874, 9700, 7797, 5564, 3794, 6302, 4544, 2197, 8271, 9562, 330, 3621, 1153, 9077, 2033, 6704, 8689, 3719, 9709, 2730, 8712, 4593, 8558, 3107, 3774, 550, 3527, 2489, 9198, 9229, 1615, 5737, 5283, 5538, 3314, 2601, 6369, 6252, 9500, 8889, 3217, 190, 5011, 8876, 6890, 4176, 2763, 854, 1980, 1088, 1841, 1717, 9199, 1266, 5936, 3211, 7384, 1445, 458, 7065, 8897, 840, 1674, 8417, 8000, 3199, 1405, 2255, 5982, 2423, 1952, 3738, 1066, 1943, 9056, 3318, 8137, 222, 1902, 7015, 2517, 8455, 7578, 7762, 2722, 216, 8595, 8562, 9407, 776, 368, 1802, 5382, 6388, 9306, 3993, 1526, 8110, 7978, 8693, 774, 8599, 3748, 9454, 6559, 5901, 4880, 7258, 7970, 7286, 9310, 3463, 8542, 6313, 538, 8499, 9987, 5137, 8053, 7446, 6222, 8469, 3836, 158, 2902, 7843, 2050, 3678, 7301, 3098, 6651, 8187, 236, 6231, 3076, 3281, 9543, 3175, 7657, 5880, 111, 7808, 3181, 7811, 1730, 2350, 8012, 8893, 5015, 3972, 4368, 1056, 9228, 1039, 3829, 2217, 6018, 7045, 5986, 7440, 4835, 474, 7423, 6938, 1482, 5154, 7522, 2731, 8300, 7183, 818, 436, 6915, 740, 4104, 7313, 229, 1098, 8977, 1705, 9304, 1973, 9923, 1260, 8979, 1013, 9644, 1320, 5509, 42, 8518, 790, 3095, 2580, 2008, 7046, 5991, 8751, 231, 8080, 5650, 9417, 8192, 3778, 2079, 5964, 7673, 8196, 9106, 8031, 586, 1633, 5079, 3312, 2569, 3588, 6465, 2790, 5220, 398, 2649, 7000, 3249, 1383, 1853, 7074, 9409, 7018, 499, 2775, 4371, 7680, 2912, 89, 8541, 177, 7758, 5877, 138, 1072, 4181, 9998, 9941, 6186, 1843, 1026, 3447, 8640, 2681, 3246, 1258, 6005, 4749, 5619, 4697, 5336, 1496, 1926, 3619, 9891, 251, 8133, 7692, 5929, 7110, 5468, 4517, 9264, 3059, 4195, 4579, 5422, 7378, 9284, 1144, 2914, 8779, 2871, 6495, 8609, 9050, 6440, 7297, 2735, 2098]],
    ]

    answerset = [8, 
    2, 
    4, 
    # 869,
    ]

    tester = Tester(Solution().largestComponentSize, verbose=0)
    tester.test(testset, answerset)
    